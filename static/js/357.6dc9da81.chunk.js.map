{"version":3,"file":"static/js/357.6dc9da81.chunk.js","mappings":"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","sources":["components/Resume/Education/Degree.js","components/Resume/Education.js","../node_modules/markdown-to-jsx/index.tsx","components/Resume/Experience/Job.js","components/Resume/Experience.js","components/Resume/References.js","data/resume/degrees.js","data/resume/work.js","pages/Resume.js","../node_modules/dayjs/dayjs.min.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Degree = ({ data }) => (\n  <article className=\"degree-container\">\n    <header>\n      <h4 className=\"degree\">{data.degree}</h4>\n      <p className=\"school\">\n        <a href={data.link}>{data.school}</a>, {data.year}\n      </p>\n    </header>\n  </article>\n);\n\nDegree.propTypes = {\n  data: PropTypes.shape({\n    degree: PropTypes.string.isRequired,\n    link: PropTypes.string.isRequired,\n    school: PropTypes.string.isRequired,\n    year: PropTypes.number.isRequired,\n  }).isRequired,\n};\n\nexport default Degree;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Degree from './Education/Degree';\n\nconst Education = ({ data }) => (\n  <div className=\"education\">\n    <div className=\"link-to\" id=\"education\" />\n    <div className=\"title\">\n      <h3>Education</h3>\n    </div>\n    {data.map((degree) => (\n      <Degree data={degree} key={degree.school} />\n    ))}\n  </div>\n);\n\nEducation.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      school: PropTypes.string,\n      degree: PropTypes.string,\n      link: PropTypes.string,\n      year: PropTypes.number,\n    }),\n  ),\n};\n\nEducation.defaultProps = {\n  data: [],\n};\n\nexport default Education;\n","/* @jsx h */\n/**\n * markdown-to-jsx is a fork of\n * [simple-markdown v0.2.2](https://github.com/Khan/simple-markdown)\n * from Khan Academy. Thank you Khan devs for making such an awesome\n * and extensible parsing infra... without it, half of the\n * optimizations here wouldn't be feasible. 🙏🏼\n */\nimport * as React from 'react'\n\n/**\n * Analogous to `node.type`. Please note that the values here may change at any time,\n * so do not hard code against the value directly.\n */\nexport const RuleType = {\n  blockQuote: '0',\n  breakLine: '1',\n  breakThematic: '2',\n  codeBlock: '3',\n  codeFenced: '4',\n  codeInline: '5',\n  footnote: '6',\n  footnoteReference: '7',\n  gfmTask: '8',\n  heading: '9',\n  headingSetext: '10',\n  /** only available if not `disableHTMLParsing` */\n  htmlBlock: '11',\n  htmlComment: '12',\n  /** only available if not `disableHTMLParsing` */\n  htmlSelfClosing: '13',\n  image: '14',\n  link: '15',\n  /** emits a `link` 'node', does not render directly */\n  linkAngleBraceStyleDetector: '16',\n  /** emits a `link` 'node', does not render directly */\n  linkBareUrlDetector: '17',\n  /** emits a `link` 'node', does not render directly */\n  linkMailtoDetector: '18',\n  newlineCoalescer: '19',\n  orderedList: '20',\n  paragraph: '21',\n  ref: '22',\n  refImage: '23',\n  refLink: '24',\n  table: '25',\n  tableSeparator: '26',\n  text: '27',\n  textBolded: '28',\n  textEmphasized: '29',\n  textEscaped: '30',\n  textMarked: '31',\n  textStrikethroughed: '32',\n  unorderedList: '33',\n} as const\n\nexport type RuleType = (typeof RuleType)[keyof typeof RuleType]\n\nconst enum Priority {\n  /**\n   * anything that must scan the tree before everything else\n   */\n  MAX,\n  /**\n   * scans for block-level constructs\n   */\n  HIGH,\n  /**\n   * inline w/ more priority than other inline\n   */\n  MED,\n  /**\n   * inline elements\n   */\n  LOW,\n  /**\n   * bare text and stuff that is considered leftovers\n   */\n  MIN,\n}\n\n/** TODO: Drop for React 16? */\nconst ATTRIBUTE_TO_JSX_PROP_MAP = [\n  'allowFullScreen',\n  'allowTransparency',\n  'autoComplete',\n  'autoFocus',\n  'autoPlay',\n  'cellPadding',\n  'cellSpacing',\n  'charSet',\n  'className',\n  'classId',\n  'colSpan',\n  'contentEditable',\n  'contextMenu',\n  'crossOrigin',\n  'encType',\n  'formAction',\n  'formEncType',\n  'formMethod',\n  'formNoValidate',\n  'formTarget',\n  'frameBorder',\n  'hrefLang',\n  'inputMode',\n  'keyParams',\n  'keyType',\n  'marginHeight',\n  'marginWidth',\n  'maxLength',\n  'mediaGroup',\n  'minLength',\n  'noValidate',\n  'radioGroup',\n  'readOnly',\n  'rowSpan',\n  'spellCheck',\n  'srcDoc',\n  'srcLang',\n  'srcSet',\n  'tabIndex',\n  'useMap',\n].reduce(\n  (obj, x) => {\n    obj[x.toLowerCase()] = x\n    return obj\n  },\n  { for: 'htmlFor' }\n)\n\nconst namedCodesToUnicode = {\n  amp: '\\u0026',\n  apos: '\\u0027',\n  gt: '\\u003e',\n  lt: '\\u003c',\n  nbsp: '\\u00a0',\n  quot: '\\u201c',\n} as const\n\nconst DO_NOT_PROCESS_HTML_ELEMENTS = ['style', 'script']\n\n/**\n * the attribute extractor regex looks for a valid attribute name,\n * followed by an equal sign (whitespace around the equal sign is allowed), followed\n * by one of the following:\n *\n * 1. a single quote-bounded string, e.g. 'foo'\n * 2. a double quote-bounded string, e.g. \"bar\"\n * 3. an interpolation, e.g. {something}\n *\n * JSX can be be interpolated into itself and is passed through the compiler using\n * the same options and setup as the current run.\n *\n * <Something children={<SomeOtherThing />} />\n *                      ==================\n *                              ↳ children: [<SomeOtherThing />]\n *\n * Otherwise, interpolations are handled as strings or simple booleans\n * unless HTML syntax is detected.\n *\n * <Something color={green} disabled={true} />\n *                   =====            ====\n *                     ↓                ↳ disabled: true\n *                     ↳ color: \"green\"\n *\n * Numbers are not parsed at this time due to complexities around int, float,\n * and the upcoming bigint functionality that would make handling it unwieldy.\n * Parse the string in your component as desired.\n *\n * <Something someBigNumber={123456789123456789} />\n *                           ==================\n *                                   ↳ someBigNumber: \"123456789123456789\"\n */\nconst ATTR_EXTRACTOR_R =\n  /([-A-Z0-9_:]+)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|(?:\\{((?:\\\\.|{[^}]*?}|[^}])*)\\})))?/gi\n\n/** TODO: Write explainers for each of these */\n\nconst AUTOLINK_MAILTO_CHECK_R = /mailto:/i\nconst BLOCK_END_R = /\\n{2,}$/\nconst BLOCKQUOTE_R = /^(\\s*>[\\s\\S]*?)(?=\\n{2,})/\nconst BLOCKQUOTE_TRIM_LEFT_MULTILINE_R = /^ *> ?/gm\nconst BREAK_LINE_R = /^ {2,}\\n/\nconst BREAK_THEMATIC_R = /^(?:( *[-*_])){3,} *(?:\\n *)+\\n/\nconst CODE_BLOCK_FENCED_R =\n  /^\\s*(`{3,}|~{3,}) *(\\S+)?([^\\n]*?)?\\n([\\s\\S]+?)\\s*\\1 *(?:\\n *)*\\n?/\nconst CODE_BLOCK_R = /^(?: {4}[^\\n]+\\n*)+(?:\\n *)+\\n?/\nconst CODE_INLINE_R = /^(`+)\\s*([\\s\\S]*?[^`])\\s*\\1(?!`)/\nconst CONSECUTIVE_NEWLINE_R = /^(?:\\n *)*\\n/\nconst CR_NEWLINE_R = /\\r\\n?/g\n\n/**\n * Matches footnotes on the format:\n *\n * [^key]: value\n *\n * Matches multiline footnotes\n *\n * [^key]: row\n * row\n * row\n *\n * And empty lines in indented multiline footnotes\n *\n * [^key]: indented with\n *     row\n *\n *     row\n *\n * Explanation:\n *\n * 1. Look for the starting tag, eg: [^key]\n *    ^\\[\\^([^\\]]+)]\n *\n * 2. The first line starts with a colon, and continues for the rest of the line\n *   :(.*)\n *\n * 3. Parse as many additional lines as possible. Matches new non-empty lines that doesn't begin with a new footnote definition.\n *    (\\n(?!\\[\\^).+)\n *\n * 4. ...or allows for repeated newlines if the next line begins with at least four whitespaces.\n *    (\\n+ {4,}.*)\n */\nconst FOOTNOTE_R = /^\\[\\^([^\\]]+)](:(.*)((\\n+ {4,}.*)|(\\n(?!\\[\\^).+))*)/\n\nconst FOOTNOTE_REFERENCE_R = /^\\[\\^([^\\]]+)]/\nconst FORMFEED_R = /\\f/g\nconst FRONT_MATTER_R = /^---[ \\t]*\\n(.|\\n)*\\n---[ \\t]*\\n/\nconst GFM_TASK_R = /^\\s*?\\[(x|\\s)\\]/\nconst HEADING_R = /^ *(#{1,6}) *([^\\n]+?)(?: +#*)?(?:\\n *)*(?:\\n|$)/\nconst HEADING_ATX_COMPLIANT_R =\n  /^ *(#{1,6}) +([^\\n]+?)(?: +#*)?(?:\\n *)*(?:\\n|$)/\nconst HEADING_SETEXT_R = /^([^\\n]+)\\n *(=|-){3,} *(?:\\n *)+\\n/\n\n/**\n * Explanation:\n *\n * 1. Look for a starting tag, preceded by any amount of spaces\n *    ^ *<\n *\n * 2. Capture the tag name (capture 1)\n *    ([^ >/]+)\n *\n * 3. Ignore a space after the starting tag and capture the attribute portion of the tag (capture 2)\n *     ?([^>]*)>\n *\n * 4. Ensure a matching closing tag is present in the rest of the input string\n *    (?=[\\s\\S]*<\\/\\1>)\n *\n * 5. Capture everything until the matching closing tag -- this might include additional pairs\n *    of the same tag type found in step 2 (capture 3)\n *    ((?:[\\s\\S]*?(?:<\\1[^>]*>[\\s\\S]*?<\\/\\1>)*[\\s\\S]*?)*?)<\\/\\1>\n *\n * 6. Capture excess newlines afterward\n *    \\n*\n */\nconst HTML_BLOCK_ELEMENT_R =\n  /^ *(?!<[a-z][^ >/]* ?\\/>)<([a-z][^ >/]*) ?((?:[^>]*[^/])?)>\\n?(\\s*(?:<\\1[^>]*?>[\\s\\S]*?<\\/\\1>|(?!<\\1\\b)[\\s\\S])*?)<\\/\\1>(?!<\\/\\1>)\\n*/i\n\nconst HTML_CHAR_CODE_R = /&([a-z0-9]+|#[0-9]{1,6}|#x[0-9a-fA-F]{1,6});/gi\n\nconst HTML_COMMENT_R = /^<!--[\\s\\S]*?(?:-->)/\n\n/**\n * borrowed from React 15(https://github.com/facebook/react/blob/894d20744cba99383ffd847dbd5b6e0800355a5c/src/renderers/dom/shared/HTMLDOMPropertyConfig.js)\n */\nconst HTML_CUSTOM_ATTR_R = /^(data|aria|x)-[a-z_][a-z\\d_.-]*$/\n\nconst HTML_SELF_CLOSING_ELEMENT_R =\n  /^ *<([a-z][a-z0-9:]*)(?:\\s+((?:<.*?>|[^>])*))?\\/?>(?!<\\/\\1>)(\\s*\\n)?/i\nconst INTERPOLATION_R = /^\\{.*\\}$/\nconst LINK_AUTOLINK_BARE_URL_R = /^(https?:\\/\\/[^\\s<]+[^<.,:;\"')\\]\\s])/\nconst LINK_AUTOLINK_MAILTO_R = /^<([^ >]+@[^ >]+)>/\nconst LINK_AUTOLINK_R = /^<([^ >]+:\\/[^ >]+)>/\nconst CAPTURE_LETTER_AFTER_HYPHEN = /-([a-z])?/gi\nconst NP_TABLE_R =\n  /^(.*\\|.*)\\n(?: *(\\|? *[-:]+ *\\|[-| :]*)\\n((?:.*\\|.*\\n)*))?\\n?/\nconst PARAGRAPH_R = /^[^\\n]+(?:  \\n|\\n{2,})/\nconst REFERENCE_IMAGE_OR_LINK = /^\\[([^\\]]*)\\]:\\s+<?([^\\s>]+)>?\\s*(\"([^\"]*)\")?/\nconst REFERENCE_IMAGE_R = /^!\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/\nconst REFERENCE_LINK_R = /^\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/\nconst SQUARE_BRACKETS_R = /(\\[|\\])/g\nconst SHOULD_RENDER_AS_BLOCK_R = /(\\n|^[-*]\\s|^#|^ {2,}|^-{2,}|^>\\s)/\nconst TAB_R = /\\t/g\nconst TABLE_TRIM_PIPES = /(^ *\\||\\| *$)/g\nconst TABLE_CENTER_ALIGN = /^ *:-+: *$/\nconst TABLE_LEFT_ALIGN = /^ *:-+ *$/\nconst TABLE_RIGHT_ALIGN = /^ *-+: *$/\n\n/**\n * For inline formatting, this partial attempts to ignore characters that\n * may appear in nested formatting that could prematurely trigger detection\n * and therefore miss content that should have been included.\n */\nconst INLINE_SKIP_R =\n  '((?:\\\\[.*?\\\\][([].*?[)\\\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~~.*?~~|==.*?==|.|\\\\n)*?)'\n\n/**\n * Detect a sequence like **foo** or __foo__. Note that bold has a higher priority\n * than emphasized to support nesting of both since they share a delimiter.\n */\nconst TEXT_BOLD_R = new RegExp(`^([*_])\\\\1${INLINE_SKIP_R}\\\\1\\\\1(?!\\\\1)`)\n\n/**\n * Detect a sequence like *foo* or _foo_.\n */\nconst TEXT_EMPHASIZED_R = new RegExp(`^([*_])${INLINE_SKIP_R}\\\\1(?!\\\\1|\\\\w)`)\n\n/**\n * Detect a sequence like ==foo==.\n */\nconst TEXT_MARKED_R = new RegExp(`^==${INLINE_SKIP_R}==`)\n\n/**\n * Detect a sequence like ~~foo~~.\n */\nconst TEXT_STRIKETHROUGHED_R = new RegExp(`^~~${INLINE_SKIP_R}~~`)\n\nconst TEXT_ESCAPED_R = /^\\\\([^0-9A-Za-z\\s])/\n\nconst TEXT_PLAIN_R =\n  /^[\\s\\S]+?(?=[^0-9A-Z\\s\\u00c0-\\uffff&#;.()'\"]|\\d+\\.|\\n\\n| {2,}\\n|\\w+:\\S|$)/i\n\nconst TRIM_STARTING_NEWLINES = /^\\n+/\n\nconst HTML_LEFT_TRIM_AMOUNT_R = /^([ \\t]*)/\n\nconst UNESCAPE_URL_R = /\\\\([^\\\\])/g\n\ntype LIST_TYPE = 1 | 2\nconst ORDERED: LIST_TYPE = 1\nconst UNORDERED: LIST_TYPE = 2\n\nconst LIST_ITEM_END_R = / *\\n+$/\nconst LIST_LOOKBEHIND_R = /(?:^|\\n)( *)$/\n\n// recognize a `*` `-`, `+`, `1.`, `2.`... list bullet\nconst ORDERED_LIST_BULLET = '(?:\\\\d+\\\\.)'\nconst UNORDERED_LIST_BULLET = '(?:[*+-])'\n\nfunction generateListItemPrefix(type: LIST_TYPE) {\n  return (\n    '( *)(' +\n    (type === ORDERED ? ORDERED_LIST_BULLET : UNORDERED_LIST_BULLET) +\n    ') +'\n  )\n}\n\n// recognize the start of a list item:\n// leading space plus a bullet plus a space (`   * `)\nconst ORDERED_LIST_ITEM_PREFIX = generateListItemPrefix(ORDERED)\nconst UNORDERED_LIST_ITEM_PREFIX = generateListItemPrefix(UNORDERED)\n\nfunction generateListItemPrefixRegex(type: LIST_TYPE) {\n  return new RegExp(\n    '^' +\n      (type === ORDERED ? ORDERED_LIST_ITEM_PREFIX : UNORDERED_LIST_ITEM_PREFIX)\n  )\n}\n\nconst ORDERED_LIST_ITEM_PREFIX_R = generateListItemPrefixRegex(ORDERED)\nconst UNORDERED_LIST_ITEM_PREFIX_R = generateListItemPrefixRegex(UNORDERED)\n\nfunction generateListItemRegex(type: LIST_TYPE) {\n  // recognize an individual list item:\n  //  * hi\n  //    this is part of the same item\n  //\n  //    as is this, which is a new paragraph in the same item\n  //\n  //  * but this is not part of the same item\n  return new RegExp(\n    '^' +\n      (type === ORDERED\n        ? ORDERED_LIST_ITEM_PREFIX\n        : UNORDERED_LIST_ITEM_PREFIX) +\n      '[^\\\\n]*(?:\\\\n' +\n      '(?!\\\\1' +\n      (type === ORDERED ? ORDERED_LIST_BULLET : UNORDERED_LIST_BULLET) +\n      ' )[^\\\\n]*)*(\\\\n|$)',\n    'gm'\n  )\n}\n\nconst ORDERED_LIST_ITEM_R = generateListItemRegex(ORDERED)\nconst UNORDERED_LIST_ITEM_R = generateListItemRegex(UNORDERED)\n\n// check whether a list item has paragraphs: if it does,\n// we leave the newlines at the end\nfunction generateListRegex(type: LIST_TYPE) {\n  const bullet = type === ORDERED ? ORDERED_LIST_BULLET : UNORDERED_LIST_BULLET\n\n  return new RegExp(\n    '^( *)(' +\n      bullet +\n      ') ' +\n      '[\\\\s\\\\S]+?(?:\\\\n{2,}(?! )' +\n      '(?!\\\\1' +\n      bullet +\n      ' (?!' +\n      bullet +\n      ' ))\\\\n*' +\n      // the \\\\s*$ here is so that we can parse the inside of nested\n      // lists, where our content might end before we receive two `\\n`s\n      '|\\\\s*\\\\n*$)'\n  )\n}\n\nconst ORDERED_LIST_R = generateListRegex(ORDERED)\nconst UNORDERED_LIST_R = generateListRegex(UNORDERED)\n\nfunction generateListRule(\n  h: any,\n  type: LIST_TYPE\n): MarkdownToJSX.Rule<\n  MarkdownToJSX.OrderedListNode | MarkdownToJSX.UnorderedListNode\n> {\n  const ordered = type === ORDERED\n  const LIST_R = ordered ? ORDERED_LIST_R : UNORDERED_LIST_R\n  const LIST_ITEM_R = ordered ? ORDERED_LIST_ITEM_R : UNORDERED_LIST_ITEM_R\n  const LIST_ITEM_PREFIX_R = ordered\n    ? ORDERED_LIST_ITEM_PREFIX_R\n    : UNORDERED_LIST_ITEM_PREFIX_R\n\n  return {\n    match(source, state, prevCapture) {\n      // We only want to break into a list if we are at the start of a\n      // line. This is to avoid parsing \"hi * there\" with \"* there\"\n      // becoming a part of a list.\n      // You might wonder, \"but that's inline, so of course it wouldn't\n      // start a list?\". You would be correct! Except that some of our\n      // lists can be inline, because they might be inside another list,\n      // in which case we can parse with inline scope, but need to allow\n      // nested lists inside this inline scope.\n      const isStartOfLine = LIST_LOOKBEHIND_R.exec(prevCapture)\n      const isListBlock = state.list || (!state.inline && !state.simple)\n\n      if (isStartOfLine && isListBlock) {\n        source = isStartOfLine[1] + source\n\n        return LIST_R.exec(source)\n      } else {\n        return null\n      }\n    },\n    order: Priority.HIGH,\n    parse(capture, parse, state) {\n      const bullet = capture[2]\n      const start = ordered ? +bullet : undefined\n      const items = capture[0]\n        // recognize the end of a paragraph block inside a list item:\n        // two or more newlines at end end of the item\n        .replace(BLOCK_END_R, '\\n')\n        .match(LIST_ITEM_R)\n\n      let lastItemWasAParagraph = false\n      const itemContent = items.map(function (item, i) {\n        // We need to see how far indented the item is:\n        const space = LIST_ITEM_PREFIX_R.exec(item)[0].length\n\n        // And then we construct a regex to \"unindent\" the subsequent\n        // lines of the items by that amount:\n        const spaceRegex = new RegExp('^ {1,' + space + '}', 'gm')\n\n        // Before processing the item, we need a couple things\n        const content = item\n          // remove indents on trailing lines:\n          .replace(spaceRegex, '')\n          // remove the bullet:\n          .replace(LIST_ITEM_PREFIX_R, '')\n\n        // Handling \"loose\" lists, like:\n        //\n        //  * this is wrapped in a paragraph\n        //\n        //  * as is this\n        //\n        //  * as is this\n        const isLastItem = i === items.length - 1\n        const containsBlocks = content.indexOf('\\n\\n') !== -1\n\n        // Any element in a list is a block if it contains multiple\n        // newlines. The last element in the list can also be a block\n        // if the previous item in the list was a block (this is\n        // because non-last items in the list can end with \\n\\n, but\n        // the last item can't, so we just \"inherit\" this property\n        // from our previous element).\n        const thisItemIsAParagraph =\n          containsBlocks || (isLastItem && lastItemWasAParagraph)\n        lastItemWasAParagraph = thisItemIsAParagraph\n\n        // backup our state for restoration afterwards. We're going to\n        // want to set state.list to true, and state.inline depending\n        // on our list's looseness.\n        const oldStateInline = state.inline\n        const oldStateList = state.list\n        state.list = true\n\n        // Parse inline if we're in a tight list, or block if we're in\n        // a loose list.\n        let adjustedContent\n        if (thisItemIsAParagraph) {\n          state.inline = false\n          adjustedContent = content.replace(LIST_ITEM_END_R, '\\n\\n')\n        } else {\n          state.inline = true\n          adjustedContent = content.replace(LIST_ITEM_END_R, '')\n        }\n\n        const result = parse(adjustedContent, state)\n\n        // Restore our state before returning\n        state.inline = oldStateInline\n        state.list = oldStateList\n\n        return result\n      })\n\n      return {\n        items: itemContent,\n        ordered: ordered,\n        start: start,\n      }\n    },\n    render(node, output, state) {\n      const Tag = node.ordered ? 'ol' : 'ul'\n\n      return (\n        <Tag\n          key={state.key}\n          start={node.type === RuleType.orderedList ? node.start : undefined}\n        >\n          {node.items.map(function generateListItem(item, i) {\n            return <li key={i}>{output(item, state)}</li>\n          })}\n        </Tag>\n      )\n    },\n  }\n}\n\nconst LINK_INSIDE = '(?:\\\\[[^\\\\]]*\\\\]|[^\\\\[\\\\]]|\\\\](?=[^\\\\[]*\\\\]))*'\nconst LINK_HREF_AND_TITLE =\n  '\\\\s*<?((?:\\\\([^)]*\\\\)|[^\\\\s\\\\\\\\]|\\\\\\\\.)*?)>?(?:\\\\s+[\\'\"]([\\\\s\\\\S]*?)[\\'\"])?\\\\s*'\nconst LINK_R = new RegExp(\n  '^\\\\[(' + LINK_INSIDE + ')\\\\]\\\\(' + LINK_HREF_AND_TITLE + '\\\\)'\n)\nconst IMAGE_R = /^!\\[(.*?)\\]\\( *((?:\\([^)]*\\)|[^() ])*) *\"?([^)\"]*)?\"?\\)/\n\nconst NON_PARAGRAPH_BLOCK_SYNTAXES = [\n  BLOCKQUOTE_R,\n  CODE_BLOCK_FENCED_R,\n  CODE_BLOCK_R,\n  HEADING_R,\n  HEADING_SETEXT_R,\n  HEADING_ATX_COMPLIANT_R,\n  HTML_COMMENT_R,\n  NP_TABLE_R,\n  ORDERED_LIST_ITEM_R,\n  ORDERED_LIST_R,\n  UNORDERED_LIST_ITEM_R,\n  UNORDERED_LIST_R,\n]\n\nconst BLOCK_SYNTAXES = [\n  ...NON_PARAGRAPH_BLOCK_SYNTAXES,\n  PARAGRAPH_R,\n  HTML_BLOCK_ELEMENT_R,\n  HTML_SELF_CLOSING_ELEMENT_R,\n]\n\nfunction containsBlockSyntax(input: string) {\n  return BLOCK_SYNTAXES.some(r => r.test(input))\n}\n\n/** Remove symmetrical leading and trailing quotes */\nfunction unquote(str: string) {\n  const first = str[0]\n  if (\n    (first === '\"' || first === \"'\") &&\n    str.length >= 2 &&\n    str[str.length - 1] === first\n  ) {\n    return str.slice(1, -1)\n  }\n  return str\n}\n\n// based on https://stackoverflow.com/a/18123682/1141611\n// not complete, but probably good enough\nexport function slugify(str: string) {\n  return str\n    .replace(/[ÀÁÂÃÄÅàáâãäåæÆ]/g, 'a')\n    .replace(/[çÇ]/g, 'c')\n    .replace(/[ðÐ]/g, 'd')\n    .replace(/[ÈÉÊËéèêë]/g, 'e')\n    .replace(/[ÏïÎîÍíÌì]/g, 'i')\n    .replace(/[Ññ]/g, 'n')\n    .replace(/[øØœŒÕõÔôÓóÒò]/g, 'o')\n    .replace(/[ÜüÛûÚúÙù]/g, 'u')\n    .replace(/[ŸÿÝý]/g, 'y')\n    .replace(/[^a-z0-9- ]/gi, '')\n    .replace(/ /gi, '-')\n    .toLowerCase()\n}\n\nfunction parseTableAlignCapture(alignCapture: string) {\n  if (TABLE_RIGHT_ALIGN.test(alignCapture)) {\n    return 'right'\n  } else if (TABLE_CENTER_ALIGN.test(alignCapture)) {\n    return 'center'\n  } else if (TABLE_LEFT_ALIGN.test(alignCapture)) {\n    return 'left'\n  }\n\n  return null\n}\n\nfunction parseTableRow(\n  source: string,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State,\n  tableOutput: boolean\n): MarkdownToJSX.ParserResult[][] {\n  const prevInTable = state.inTable\n  state.inTable = true\n  let tableRow = source\n    .trim()\n    // isolate situations where a pipe should be ignored (inline code, HTML)\n    .split(/( *(?:`[^`]*`|<.*?>.*?<\\/.*?>(?!<\\/.*?>)|\\\\\\||\\|) *)/)\n    .reduce((nodes, fragment) => {\n      if (fragment.trim() === '|')\n        nodes.push(\n          tableOutput\n            ? { type: RuleType.tableSeparator }\n            : { type: RuleType.text, text: fragment }\n        )\n      else if (fragment !== '') nodes.push.apply(nodes, parse(fragment, state))\n      return nodes\n    }, [] as MarkdownToJSX.ParserResult[])\n  state.inTable = prevInTable\n\n  let cells = [[]]\n  tableRow.forEach(function (node, i) {\n    if (node.type === RuleType.tableSeparator) {\n      // Filter out empty table separators at the start/end:\n      if (i !== 0 && i !== tableRow.length - 1) {\n        // Split the current row:\n        cells.push([])\n      }\n    } else {\n      if (\n        node.type === RuleType.text &&\n        (tableRow[i + 1] == null ||\n          tableRow[i + 1].type === RuleType.tableSeparator)\n      ) {\n        node.text = node.text.trimEnd()\n      }\n      cells[cells.length - 1].push(node)\n    }\n  })\n  return cells\n}\n\nfunction parseTableAlign(source: string /*, parse, state*/) {\n  const alignText = source.replace(TABLE_TRIM_PIPES, '').split('|')\n\n  return alignText.map(parseTableAlignCapture)\n}\n\nfunction parseTableCells(\n  source: string,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State\n) {\n  const rowsText = source.trim().split('\\n')\n\n  return rowsText.map(function (rowText) {\n    return parseTableRow(rowText, parse, state, true)\n  })\n}\n\nfunction parseTable(\n  capture: RegExpMatchArray,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State\n) {\n  /**\n   * The table syntax makes some other parsing angry so as a bit of a hack even if alignment and/or cell rows are missing,\n   * we'll still run a detected first row through the parser and then just emit a paragraph.\n   */\n  state.inline = true\n  const align = capture[2] ? parseTableAlign(capture[2]) : []\n  const cells = capture[3] ? parseTableCells(capture[3], parse, state) : []\n  const header = parseTableRow(capture[1], parse, state, !!cells.length)\n  state.inline = false\n\n  return cells.length\n    ? {\n        align: align,\n        cells: cells,\n        header: header,\n        type: RuleType.table,\n      }\n    : {\n        children: header,\n        type: RuleType.paragraph,\n      }\n}\n\nfunction getTableStyle(node, colIndex) {\n  return node.align[colIndex] == null\n    ? {}\n    : {\n        textAlign: node.align[colIndex],\n      }\n}\n\n/** TODO: remove for react 16 */\nfunction normalizeAttributeKey(key) {\n  const hyphenIndex = key.indexOf('-')\n\n  if (hyphenIndex !== -1 && key.match(HTML_CUSTOM_ATTR_R) === null) {\n    key = key.replace(CAPTURE_LETTER_AFTER_HYPHEN, function (_, letter) {\n      return letter.toUpperCase()\n    })\n  }\n\n  return key\n}\n\nfunction attributeValueToJSXPropValue(\n  tag: MarkdownToJSX.HTMLTags,\n  key: keyof React.AllHTMLAttributes<Element>,\n  value: string,\n  sanitizeUrlFn: MarkdownToJSX.Options['sanitizer']\n): any {\n  if (key === 'style') {\n    return value.split(/;\\s?/).reduce(function (styles, kvPair) {\n      const key = kvPair.slice(0, kvPair.indexOf(':'))\n\n      // snake-case to camelCase\n      // also handles PascalCasing vendor prefixes\n      const camelCasedKey = key\n        .trim()\n        .replace(/(-[a-z])/g, substr => substr[1].toUpperCase())\n\n      // key.length + 1 to skip over the colon\n      styles[camelCasedKey] = kvPair.slice(key.length + 1).trim()\n\n      return styles\n    }, {})\n  } else if (key === 'href' || key === 'src') {\n    return sanitizeUrlFn(value, tag, key)\n  } else if (value.match(INTERPOLATION_R)) {\n    // return as a string and let the consumer decide what to do with it\n    value = value.slice(1, value.length - 1)\n  }\n\n  if (value === 'true') {\n    return true\n  } else if (value === 'false') {\n    return false\n  }\n\n  return value\n}\n\nfunction normalizeWhitespace(source: string): string {\n  return source\n    .replace(CR_NEWLINE_R, '\\n')\n    .replace(FORMFEED_R, '')\n    .replace(TAB_R, '    ')\n}\n\n/**\n * Creates a parser for a given set of rules, with the precedence\n * specified as a list of rules.\n *\n * @rules: an object containing\n * rule type -> {match, order, parse} objects\n * (lower order is higher precedence)\n * (Note: `order` is added to defaultRules after creation so that\n *  the `order` of defaultRules in the source matches the `order`\n *  of defaultRules in terms of `order` fields.)\n *\n * @returns The resulting parse function, with the following parameters:\n *   @source: the input source string to be parsed\n *   @state: an optional object to be threaded through parse\n *     calls. Allows clients to add stateful operations to\n *     parsing, such as keeping track of how many levels deep\n *     some nesting is. For an example use-case, see passage-ref\n *     parsing in src/widgets/passage/passage-markdown.jsx\n */\nfunction parserFor(\n  rules: MarkdownToJSX.Rules\n): (\n  source: string,\n  state: MarkdownToJSX.State\n) => ReturnType<MarkdownToJSX.NestedParser> {\n  // Sorts rules in order of increasing order, then\n  // ascending rule name in case of ties.\n  let ruleList = Object.keys(rules)\n\n  if (process.env.NODE_ENV !== 'production') {\n    ruleList.forEach(function (type) {\n      let order = rules[type].order\n      if (\n        process.env.NODE_ENV !== 'production' &&\n        (typeof order !== 'number' || !isFinite(order))\n      ) {\n        console.warn(\n          'markdown-to-jsx: Invalid order for rule `' + type + '`: ' + order\n        )\n      }\n    })\n  }\n\n  ruleList.sort(function (typeA, typeB) {\n    let orderA = rules[typeA].order\n    let orderB = rules[typeB].order\n\n    // Sort based on increasing order\n    if (orderA !== orderB) {\n      return orderA - orderB\n    } else if (typeA < typeB) {\n      return -1\n    }\n\n    return 1\n  })\n\n  function nestedParse(\n    source: string,\n    state: MarkdownToJSX.State\n  ): MarkdownToJSX.ParserResult[] {\n    let result = []\n\n    // We store the previous capture so that match functions can\n    // use some limited amount of lookbehind. Lists use this to\n    // ensure they don't match arbitrary '- ' or '* ' in inline\n    // text (see the list rule for more information).\n    let prevCapture = ''\n    while (source) {\n      let i = 0\n      while (i < ruleList.length) {\n        const ruleType = ruleList[i]\n        const rule = rules[ruleType]\n        const capture = rule.match(source, state, prevCapture)\n\n        if (capture) {\n          const currCaptureString = capture[0]\n          source = source.substring(currCaptureString.length)\n          const parsed = rule.parse(capture, nestedParse, state)\n\n          // We also let rules override the default type of\n          // their parsed node if they would like to, so that\n          // there can be a single output function for all links,\n          // even if there are several rules to parse them.\n          if (parsed.type == null) {\n            parsed.type = ruleType as unknown as RuleType\n          }\n\n          result.push(parsed)\n\n          prevCapture = currCaptureString\n          break\n        }\n\n        i++\n      }\n    }\n\n    return result\n  }\n\n  return function outerParse(source, state) {\n    return nestedParse(normalizeWhitespace(source), state)\n  }\n}\n\n// Creates a match function for an inline scoped or simple element from a regex\nfunction inlineRegex(regex: RegExp) {\n  return function match(source, state: MarkdownToJSX.State) {\n    if (state.inline) {\n      return regex.exec(source)\n    } else {\n      return null\n    }\n  }\n}\n\n// basically any inline element except links\nfunction simpleInlineRegex(regex: RegExp) {\n  return function match(source: string, state: MarkdownToJSX.State) {\n    if (state.inline || state.simple) {\n      return regex.exec(source)\n    } else {\n      return null\n    }\n  }\n}\n\n// Creates a match function for a block scoped element from a regex\nfunction blockRegex(regex: RegExp) {\n  return function match(source: string, state: MarkdownToJSX.State) {\n    if (state.inline || state.simple) {\n      return null\n    } else {\n      return regex.exec(source)\n    }\n  }\n}\n\n// Creates a match function from a regex, ignoring block/inline scope\nfunction anyScopeRegex(regex: RegExp) {\n  return function match(source: string /*, state*/) {\n    return regex.exec(source)\n  }\n}\n\nfunction matchParagraph(\n  source: string,\n  state: MarkdownToJSX.State,\n  prevCapturedString?: string\n) {\n  if (state.inline || state.simple) {\n    return null\n  }\n\n  if (prevCapturedString && !prevCapturedString.endsWith('\\n')) {\n    // don't match continuation of a line\n    return null\n  }\n\n  let match = ''\n\n  source.split('\\n').every(line => {\n    // bail out on first sign of non-paragraph block\n    if (NON_PARAGRAPH_BLOCK_SYNTAXES.some(regex => regex.test(line))) {\n      return false\n    }\n    match += line + '\\n'\n    return line.trim()\n  })\n\n  const captured = match.trimEnd()\n  if (captured == '') {\n    return null\n  }\n\n  return [match, captured]\n}\n\nexport function sanitizer(url: string): string {\n  try {\n    const decoded = decodeURIComponent(url).replace(/[^A-Za-z0-9/:]/g, '')\n\n    if (decoded.match(/^\\s*(javascript|vbscript|data(?!:image)):/i)) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.warn(\n          'Anchor URL contains an unsafe JavaScript/VBScript/data expression, it will not be rendered.',\n          decoded\n        )\n      }\n\n      return null\n    }\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn(\n        'Anchor URL could not be decoded due to malformed syntax or characters, it will not be rendered.',\n        url\n      )\n    }\n\n    // decodeURIComponent sometimes throws a URIError\n    // See `decodeURIComponent('a%AFc');`\n    // http://stackoverflow.com/questions/9064536/javascript-decodeuricomponent-malformed-uri-exception\n    return null\n  }\n\n  return url\n}\n\nfunction unescapeUrl(rawUrlString: string): string {\n  return rawUrlString.replace(UNESCAPE_URL_R, '$1')\n}\n\n/**\n * Everything inline, including links.\n */\nfunction parseInline(\n  parse: MarkdownToJSX.NestedParser,\n  children: string,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult[] {\n  const isCurrentlyInline = state.inline || false\n  const isCurrentlySimple = state.simple || false\n  state.inline = true\n  state.simple = true\n  const result = parse(children, state)\n  state.inline = isCurrentlyInline\n  state.simple = isCurrentlySimple\n  return result\n}\n\n/**\n * Anything inline that isn't a link.\n */\nfunction parseSimpleInline(\n  parse: MarkdownToJSX.NestedParser,\n  children: string,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult[] {\n  const isCurrentlyInline = state.inline || false\n  const isCurrentlySimple = state.simple || false\n  state.inline = false\n  state.simple = true\n  const result = parse(children, state)\n  state.inline = isCurrentlyInline\n  state.simple = isCurrentlySimple\n  return result\n}\n\nfunction parseBlock(\n  parse,\n  children,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult[] {\n  const isCurrentlyInline = state.inline || false\n  state.inline = false\n  const result = parse(children, state)\n  state.inline = isCurrentlyInline\n  return result\n}\n\nconst parseCaptureInline: MarkdownToJSX.Parser<{\n  children: MarkdownToJSX.ParserResult[]\n}> = (capture, parse, state: MarkdownToJSX.State) => {\n  return {\n    children: parseInline(parse, capture[1], state),\n  }\n}\n\nfunction captureNothing() {\n  return {}\n}\n\nfunction renderNothing() {\n  return null\n}\n\nfunction reactFor(render) {\n  return function patchedRender(\n    ast: MarkdownToJSX.ParserResult | MarkdownToJSX.ParserResult[],\n    state: MarkdownToJSX.State = {}\n  ): React.ReactChild[] {\n    if (Array.isArray(ast)) {\n      const oldKey = state.key\n      const result = []\n\n      // map nestedOutput over the ast, except group any text\n      // nodes together into a single string output.\n      let lastWasString = false\n\n      for (let i = 0; i < ast.length; i++) {\n        state.key = i\n\n        const nodeOut = patchedRender(ast[i], state)\n        const isString = typeof nodeOut === 'string'\n\n        if (isString && lastWasString) {\n          result[result.length - 1] += nodeOut\n        } else if (nodeOut !== null) {\n          result.push(nodeOut)\n        }\n\n        lastWasString = isString\n      }\n\n      state.key = oldKey\n\n      return result\n    }\n\n    return render(ast, patchedRender, state)\n  }\n}\n\nfunction createRenderer(\n  rules: MarkdownToJSX.Rules,\n  userRender?: MarkdownToJSX.Options['renderRule']\n) {\n  return function renderRule(\n    ast: MarkdownToJSX.ParserResult,\n    render: MarkdownToJSX.RuleOutput,\n    state: MarkdownToJSX.State\n  ): React.ReactChild {\n    const renderer = rules[ast.type].render as MarkdownToJSX.Rule['render']\n\n    return userRender\n      ? userRender(() => renderer(ast, render, state), ast, render, state)\n      : renderer(ast, render, state)\n  }\n}\n\nfunction cx(...args) {\n  return args.filter(Boolean).join(' ')\n}\n\nfunction get(src: Object, path: string, fb?: any) {\n  let ptr = src\n  const frags = path.split('.')\n\n  while (frags.length) {\n    ptr = ptr[frags[0]]\n\n    if (ptr === undefined) break\n    else frags.shift()\n  }\n\n  return ptr || fb\n}\n\nfunction getTag(tag: string, overrides: MarkdownToJSX.Overrides) {\n  const override = get(overrides, tag)\n\n  if (!override) return tag\n\n  return typeof override === 'function' ||\n    (typeof override === 'object' && 'render' in override)\n    ? override\n    : get(overrides, `${tag}.component`, tag)\n}\n\nexport function compiler(\n  markdown: string = '',\n  options: MarkdownToJSX.Options = {}\n) {\n  options.overrides = options.overrides || {}\n  options.sanitizer = options.sanitizer || sanitizer\n  options.slugify = options.slugify || slugify\n  options.namedCodesToUnicode = options.namedCodesToUnicode\n    ? { ...namedCodesToUnicode, ...options.namedCodesToUnicode }\n    : namedCodesToUnicode\n\n  options.createElement = options.createElement || React.createElement\n\n  // JSX custom pragma\n  // eslint-disable-next-line no-unused-vars\n  function h(\n    // locally we always will render a known string tag\n    tag: MarkdownToJSX.HTMLTags,\n    props: Parameters<MarkdownToJSX.CreateElement>[1] & {\n      className?: string\n      id?: string\n    },\n    ...children\n  ) {\n    const overrideProps = get(options.overrides, `${tag}.props`, {})\n\n    return options.createElement(\n      getTag(tag, options.overrides),\n      {\n        ...props,\n        ...overrideProps,\n        className: cx(props?.className, overrideProps.className) || undefined,\n      },\n      ...children\n    )\n  }\n\n  function compile(input: string): JSX.Element {\n    input = input.replace(FRONT_MATTER_R, '')\n\n    let inline = false\n\n    if (options.forceInline) {\n      inline = true\n    } else if (!options.forceBlock) {\n      /**\n       * should not contain any block-level markdown like newlines, lists, headings,\n       * thematic breaks, blockquotes, tables, etc\n       */\n      inline = SHOULD_RENDER_AS_BLOCK_R.test(input) === false\n    }\n\n    const arr = emitter(\n      parser(\n        inline\n          ? input\n          : `${input.trimEnd().replace(TRIM_STARTING_NEWLINES, '')}\\n\\n`,\n        {\n          inline,\n        }\n      )\n    )\n\n    while (\n      typeof arr[arr.length - 1] === 'string' &&\n      !arr[arr.length - 1].trim()\n    ) {\n      arr.pop()\n    }\n\n    if (options.wrapper === null) {\n      return arr\n    }\n\n    const wrapper = options.wrapper || (inline ? 'span' : 'div')\n    let jsx\n\n    if (arr.length > 1 || options.forceWrapper) {\n      jsx = arr\n    } else if (arr.length === 1) {\n      jsx = arr[0]\n\n      // TODO: remove this for React 16\n      if (typeof jsx === 'string') {\n        return <span key=\"outer\">{jsx}</span>\n      } else {\n        return jsx\n      }\n    } else {\n      // TODO: return null for React 16\n      jsx = null\n    }\n\n    return React.createElement(wrapper, { key: 'outer' }, jsx)\n  }\n\n  function attrStringToMap(\n    tag: MarkdownToJSX.HTMLTags,\n    str: string\n  ): JSX.IntrinsicAttributes {\n    const attributes = str.match(ATTR_EXTRACTOR_R)\n    if (!attributes) {\n      return null\n    }\n\n    return attributes.reduce(function (map, raw, index) {\n      const delimiterIdx = raw.indexOf('=')\n\n      if (delimiterIdx !== -1) {\n        const key = normalizeAttributeKey(raw.slice(0, delimiterIdx)).trim()\n        const value = unquote(raw.slice(delimiterIdx + 1).trim())\n\n        const mappedKey = ATTRIBUTE_TO_JSX_PROP_MAP[key] || key\n        const normalizedValue = (map[mappedKey] = attributeValueToJSXPropValue(\n          tag,\n          key,\n          value,\n          options.sanitizer\n        ))\n\n        if (\n          typeof normalizedValue === 'string' &&\n          (HTML_BLOCK_ELEMENT_R.test(normalizedValue) ||\n            HTML_SELF_CLOSING_ELEMENT_R.test(normalizedValue))\n        ) {\n          map[mappedKey] = React.cloneElement(compile(normalizedValue.trim()), {\n            key: index,\n          })\n        }\n      } else if (raw !== 'style') {\n        map[ATTRIBUTE_TO_JSX_PROP_MAP[raw] || raw] = true\n      }\n\n      return map\n    }, {})\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof markdown !== 'string') {\n      throw new Error(`markdown-to-jsx: the first argument must be\n                             a string`)\n    }\n\n    if (\n      Object.prototype.toString.call(options.overrides) !== '[object Object]'\n    ) {\n      throw new Error(`markdown-to-jsx: options.overrides (second argument property) must be\n                             undefined or an object literal with shape:\n                             {\n                                htmltagname: {\n                                    component: string|ReactComponent(optional),\n                                    props: object(optional)\n                                }\n                             }`)\n    }\n  }\n\n  const footnotes: { footnote: string; identifier: string }[] = []\n  const refs: { [key: string]: { target: string; title: string } } = {}\n\n  /**\n   * each rule's react() output function goes through our custom\n   * h() JSX pragma; this allows the override functionality to be\n   * automatically applied\n   */\n  // @ts-ignore\n  const rules: MarkdownToJSX.Rules = {\n    [RuleType.blockQuote]: {\n      match: blockRegex(BLOCKQUOTE_R),\n      order: Priority.HIGH,\n      parse(capture, parse, state) {\n        return {\n          children: parse(\n            capture[0].replace(BLOCKQUOTE_TRIM_LEFT_MULTILINE_R, ''),\n            state\n          ),\n        }\n      },\n      render(node, output, state) {\n        return (\n          <blockquote key={state.key}>\n            {output(node.children, state)}\n          </blockquote>\n        )\n      },\n    },\n\n    [RuleType.breakLine]: {\n      match: anyScopeRegex(BREAK_LINE_R),\n      order: Priority.HIGH,\n      parse: captureNothing,\n      render(_, __, state) {\n        return <br key={state.key} />\n      },\n    },\n\n    [RuleType.breakThematic]: {\n      match: blockRegex(BREAK_THEMATIC_R),\n      order: Priority.HIGH,\n      parse: captureNothing,\n      render(_, __, state) {\n        return <hr key={state.key} />\n      },\n    },\n\n    [RuleType.codeBlock]: {\n      match: blockRegex(CODE_BLOCK_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        return {\n          lang: undefined,\n          text: capture[0].replace(/^ {4}/gm, '').replace(/\\n+$/, ''),\n        }\n      },\n\n      render(node, output, state) {\n        return (\n          <pre key={state.key}>\n            <code\n              {...node.attrs}\n              className={node.lang ? `lang-${node.lang}` : ''}\n            >\n              {node.text}\n            </code>\n          </pre>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      attrs?: ReturnType<typeof attrStringToMap>\n      lang?: string\n      text: string\n    }>,\n\n    [RuleType.codeFenced]: {\n      match: blockRegex(CODE_BLOCK_FENCED_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        return {\n          // if capture[3] it's additional metadata\n          attrs: attrStringToMap('code', capture[3] || ''),\n          lang: capture[2] || undefined,\n          text: capture[4],\n          type: RuleType.codeBlock,\n        }\n      },\n    },\n\n    [RuleType.codeInline]: {\n      match: simpleInlineRegex(CODE_INLINE_R),\n      order: Priority.LOW,\n      parse(capture /*, parse, state*/) {\n        return {\n          text: capture[2],\n        }\n      },\n      render(node, output, state) {\n        return <code key={state.key}>{node.text}</code>\n      },\n    },\n\n    /**\n     * footnotes are emitted at the end of compilation in a special <footer> block\n     */\n    [RuleType.footnote]: {\n      match: blockRegex(FOOTNOTE_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        footnotes.push({\n          footnote: capture[2],\n          identifier: capture[1],\n        })\n\n        return {}\n      },\n      render: renderNothing,\n    },\n\n    [RuleType.footnoteReference]: {\n      match: inlineRegex(FOOTNOTE_REFERENCE_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse*/) {\n        return {\n          target: `#${options.slugify(capture[1], slugify)}`,\n          text: capture[1],\n        }\n      },\n      render(node, output, state) {\n        return (\n          <a key={state.key} href={options.sanitizer(node.target, 'a', 'href')}>\n            <sup key={state.key}>{node.text}</sup>\n          </a>\n        )\n      },\n    } as MarkdownToJSX.Rule<{ target: string; text: string }>,\n\n    [RuleType.gfmTask]: {\n      match: inlineRegex(GFM_TASK_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse, state*/) {\n        return {\n          completed: capture[1].toLowerCase() === 'x',\n        }\n      },\n      render(node, output, state) {\n        return (\n          <input\n            checked={node.completed}\n            key={state.key}\n            readOnly\n            type=\"checkbox\"\n          />\n        )\n      },\n    } as MarkdownToJSX.Rule<{ completed: boolean }>,\n\n    [RuleType.heading]: {\n      match: blockRegex(\n        options.enforceAtxHeadings ? HEADING_ATX_COMPLIANT_R : HEADING_R\n      ),\n      order: Priority.HIGH,\n      parse(capture, parse, state) {\n        return {\n          children: parseInline(parse, capture[2], state),\n          id: options.slugify(capture[2], slugify),\n          level: capture[1].length as MarkdownToJSX.HeadingNode['level'],\n        }\n      },\n      render(node, output, state) {\n        return h(\n          `h${node.level}`,\n          { id: node.id, key: state.key },\n          output(node.children, state)\n        )\n      },\n    },\n\n    [RuleType.headingSetext]: {\n      match: blockRegex(HEADING_SETEXT_R),\n      order: Priority.MAX,\n      parse(capture, parse, state) {\n        return {\n          children: parseInline(parse, capture[1], state),\n          level: capture[2] === '=' ? 1 : 2,\n          type: RuleType.heading,\n        }\n      },\n    },\n\n    [RuleType.htmlBlock]: {\n      /**\n       * find the first matching end tag and process the interior\n       */\n      match: anyScopeRegex(HTML_BLOCK_ELEMENT_R),\n      order: Priority.HIGH,\n      parse(capture, parse, state) {\n        const [, whitespace] = capture[3].match(HTML_LEFT_TRIM_AMOUNT_R)\n\n        const trimmer = new RegExp(`^${whitespace}`, 'gm')\n        const trimmed = capture[3].replace(trimmer, '')\n\n        const parseFunc = containsBlockSyntax(trimmed)\n          ? parseBlock\n          : parseInline\n\n        const tagName = capture[1].toLowerCase() as MarkdownToJSX.HTMLTags\n        const noInnerParse =\n          DO_NOT_PROCESS_HTML_ELEMENTS.indexOf(tagName) !== -1\n\n        const tag = (\n          noInnerParse ? tagName : capture[1]\n        ).trim() as MarkdownToJSX.HTMLTags\n\n        const ast = {\n          attrs: attrStringToMap(tag, capture[2]),\n          noInnerParse: noInnerParse,\n          tag,\n        } as {\n          attrs: ReturnType<typeof attrStringToMap>\n          children?: ReturnType<MarkdownToJSX.NestedParser> | undefined\n          noInnerParse: Boolean\n          tag: MarkdownToJSX.HTMLTags\n          text?: string | undefined\n        }\n\n        state.inAnchor = state.inAnchor || tagName === 'a'\n\n        if (noInnerParse) {\n          ast.text = capture[3]\n        } else {\n          ast.children = parseFunc(parse, trimmed, state)\n        }\n\n        /**\n         * if another html block is detected within, parse as block,\n         * otherwise parse as inline to pick up any further markdown\n         */\n        state.inAnchor = false\n\n        return ast\n      },\n      render(node, output, state) {\n        return (\n          <node.tag key={state.key} {...node.attrs}>\n            {node.text || output(node.children, state)}\n          </node.tag>\n        )\n      },\n    },\n\n    [RuleType.htmlSelfClosing]: {\n      /**\n       * find the first matching end tag and process the interior\n       */\n      match: anyScopeRegex(HTML_SELF_CLOSING_ELEMENT_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse, state*/) {\n        const tag = capture[1].trim() as MarkdownToJSX.HTMLTags\n\n        return {\n          attrs: attrStringToMap(tag, capture[2] || ''),\n          tag,\n        }\n      },\n      render(node, output, state) {\n        return <node.tag {...node.attrs} key={state.key} />\n      },\n    },\n\n    [RuleType.htmlComment]: {\n      match: anyScopeRegex(HTML_COMMENT_R),\n      order: Priority.HIGH,\n      parse() {\n        return {}\n      },\n      render: renderNothing,\n    },\n\n    [RuleType.image]: {\n      match: simpleInlineRegex(IMAGE_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse, state*/) {\n        return {\n          alt: capture[1],\n          target: unescapeUrl(capture[2]),\n          title: capture[3],\n        }\n      },\n      render(node, output, state) {\n        return (\n          <img\n            key={state.key}\n            alt={node.alt || undefined}\n            title={node.title || undefined}\n            src={options.sanitizer(node.target, 'img', 'src')}\n          />\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      alt?: string\n      target: string\n      title?: string\n    }>,\n\n    [RuleType.link]: {\n      match: inlineRegex(LINK_R),\n      order: Priority.LOW,\n      parse(capture, parse, state) {\n        return {\n          children: parseSimpleInline(parse, capture[1], state),\n          target: unescapeUrl(capture[2]),\n          title: capture[3],\n        }\n      },\n      render(node, output, state) {\n        return (\n          <a\n            key={state.key}\n            href={options.sanitizer(node.target, 'a', 'href')}\n            title={node.title}\n          >\n            {output(node.children, state)}\n          </a>\n        )\n      },\n    },\n\n    // https://daringfireball.net/projects/markdown/syntax#autolink\n    [RuleType.linkAngleBraceStyleDetector]: {\n      match: inlineRegex(LINK_AUTOLINK_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        return {\n          children: [\n            {\n              text: capture[1],\n              type: RuleType.text,\n            },\n          ],\n          target: capture[1],\n          type: RuleType.link,\n        }\n      },\n    },\n\n    [RuleType.linkBareUrlDetector]: {\n      match: (source, state) => {\n        if (state.inAnchor) {\n          return null\n        }\n        return inlineRegex(LINK_AUTOLINK_BARE_URL_R)(source, state)\n      },\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        return {\n          children: [\n            {\n              text: capture[1],\n              type: RuleType.text,\n            },\n          ],\n          target: capture[1],\n          title: undefined,\n          type: RuleType.link,\n        }\n      },\n    },\n\n    [RuleType.linkMailtoDetector]: {\n      match: inlineRegex(LINK_AUTOLINK_MAILTO_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        let address = capture[1]\n        let target = capture[1]\n\n        // Check for a `mailto:` already existing in the link:\n        if (!AUTOLINK_MAILTO_CHECK_R.test(target)) {\n          target = 'mailto:' + target\n        }\n\n        return {\n          children: [\n            {\n              text: address.replace('mailto:', ''),\n              type: RuleType.text,\n            },\n          ],\n          target: target,\n          type: RuleType.link,\n        }\n      },\n    },\n\n    [RuleType.orderedList]: generateListRule(\n      h,\n      ORDERED\n    ) as MarkdownToJSX.Rule<MarkdownToJSX.OrderedListNode>,\n\n    [RuleType.unorderedList]: generateListRule(\n      h,\n      UNORDERED\n    ) as MarkdownToJSX.Rule<MarkdownToJSX.UnorderedListNode>,\n\n    [RuleType.newlineCoalescer]: {\n      match: blockRegex(CONSECUTIVE_NEWLINE_R),\n      order: Priority.LOW,\n      parse: captureNothing,\n      render(/*node, output, state*/) {\n        return '\\n'\n      },\n    },\n\n    [RuleType.paragraph]: {\n      match: matchParagraph,\n      order: Priority.LOW,\n      parse: parseCaptureInline,\n      render(node, output, state) {\n        return <p key={state.key}>{output(node.children, state)}</p>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<typeof parseCaptureInline>>,\n\n    [RuleType.ref]: {\n      match: inlineRegex(REFERENCE_IMAGE_OR_LINK),\n      order: Priority.MAX,\n      parse(capture /*, parse*/) {\n        refs[capture[1]] = {\n          target: capture[2],\n          title: capture[4],\n        }\n\n        return {}\n      },\n      render: renderNothing,\n    },\n\n    [RuleType.refImage]: {\n      match: simpleInlineRegex(REFERENCE_IMAGE_R),\n      order: Priority.MAX,\n      parse(capture) {\n        return {\n          alt: capture[1] || undefined,\n          ref: capture[2],\n        }\n      },\n      render(node, output, state) {\n        return refs[node.ref] ? (\n          <img\n            key={state.key}\n            alt={node.alt}\n            src={options.sanitizer(refs[node.ref].target, 'img', 'src')}\n            title={refs[node.ref].title}\n          />\n        ) : null\n      },\n    } as MarkdownToJSX.Rule<{ alt?: string; ref: string }>,\n\n    [RuleType.refLink]: {\n      match: inlineRegex(REFERENCE_LINK_R),\n      order: Priority.MAX,\n      parse(capture, parse, state) {\n        return {\n          children: parse(capture[1], state),\n          fallbackChildren: parse(\n            capture[0].replace(SQUARE_BRACKETS_R, '\\\\$1'),\n            state\n          ),\n          ref: capture[2],\n        }\n      },\n      render(node, output, state) {\n        return refs[node.ref] ? (\n          <a\n            key={state.key}\n            href={options.sanitizer(refs[node.ref].target, 'a', 'href')}\n            title={refs[node.ref].title}\n          >\n            {output(node.children, state)}\n          </a>\n        ) : (\n          <span key={state.key}>{output(node.fallbackChildren, state)}</span>\n        )\n      },\n    },\n\n    [RuleType.table]: {\n      match: blockRegex(NP_TABLE_R),\n      order: Priority.HIGH,\n      parse: parseTable,\n      render(node, output, state) {\n        const table = node as MarkdownToJSX.TableNode\n        return (\n          <table key={state.key}>\n            <thead>\n              <tr>\n                {table.header.map(function generateHeaderCell(content, i) {\n                  return (\n                    <th key={i} style={getTableStyle(table, i)}>\n                      {output(content, state)}\n                    </th>\n                  )\n                })}\n              </tr>\n            </thead>\n\n            <tbody>\n              {table.cells.map(function generateTableRow(row, i) {\n                return (\n                  <tr key={i}>\n                    {row.map(function generateTableCell(content, c) {\n                      return (\n                        <td key={c} style={getTableStyle(table, c)}>\n                          {output(content, state)}\n                        </td>\n                      )\n                    })}\n                  </tr>\n                )\n              })}\n            </tbody>\n          </table>\n        )\n      },\n    },\n\n    [RuleType.text]: {\n      // Here we look for anything followed by non-symbols,\n      // double newlines, or double-space-newlines\n      // We break on any symbol characters so that this grammar\n      // is easy to extend without needing to modify this regex\n      match: anyScopeRegex(TEXT_PLAIN_R),\n      order: Priority.MIN,\n      parse(capture /*, parse, state*/) {\n        return {\n          text: capture[0]\n            // nbsp -> unicode equivalent for named chars\n            .replace(HTML_CHAR_CODE_R, (full, inner) => {\n              return options.namedCodesToUnicode[inner]\n                ? options.namedCodesToUnicode[inner]\n                : full\n            }),\n        }\n      },\n      render(node /*, output, state*/) {\n        return node.text\n      },\n    },\n\n    [RuleType.textBolded]: {\n      match: simpleInlineRegex(TEXT_BOLD_R),\n      order: Priority.MED,\n      parse(capture, parse, state) {\n        return {\n          // capture[1] -> the syntax control character\n          // capture[2] -> inner content\n          children: parse(capture[2], state),\n        }\n      },\n      render(node, output, state) {\n        return <strong key={state.key}>{output(node.children, state)}</strong>\n      },\n    },\n\n    [RuleType.textEmphasized]: {\n      match: simpleInlineRegex(TEXT_EMPHASIZED_R),\n      order: Priority.LOW,\n      parse(capture, parse, state) {\n        return {\n          // capture[1] -> opening * or _\n          // capture[2] -> inner content\n          children: parse(capture[2], state),\n        }\n      },\n      render(node, output, state) {\n        return <em key={state.key}>{output(node.children, state)}</em>\n      },\n    },\n\n    [RuleType.textEscaped]: {\n      // We don't allow escaping numbers, letters, or spaces here so that\n      // backslashes used in plain text still get rendered. But allowing\n      // escaping anything else provides a very flexible escape mechanism,\n      // regardless of how this grammar is extended.\n      match: simpleInlineRegex(TEXT_ESCAPED_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse, state*/) {\n        return {\n          text: capture[1],\n          type: RuleType.text,\n        }\n      },\n    },\n\n    [RuleType.textMarked]: {\n      match: simpleInlineRegex(TEXT_MARKED_R),\n      order: Priority.LOW,\n      parse: parseCaptureInline,\n      render(node, output, state) {\n        return <mark key={state.key}>{output(node.children, state)}</mark>\n      },\n    },\n\n    [RuleType.textStrikethroughed]: {\n      match: simpleInlineRegex(TEXT_STRIKETHROUGHED_R),\n      order: Priority.LOW,\n      parse: parseCaptureInline,\n      render(node, output, state) {\n        return <del key={state.key}>{output(node.children, state)}</del>\n      },\n    },\n  }\n\n  // Object.keys(rules).forEach(key => {\n  //   let { match: match, parse: parse } = rules[key]\n\n  //   rules[key].match = (...args) => {\n  //     const start = performance.now()\n  //     const result = match(...args)\n  //     const delta = performance.now() - start\n\n  //     if (delta > 5)\n  //       console.warn(\n  //         `Slow match for ${key}: ${delta.toFixed(3)}ms, input: ${args[0]}`\n  //       )\n\n  //     return result\n  //   }\n\n  //   rules[key].parse = (...args) => {\n  //     const start = performance.now()\n  //     const result = parse(...args)\n  //     const delta = performance.now() - start\n\n  //     if (delta > 5)\n  //       console.warn(`Slow parse for ${key}: ${delta.toFixed(3)}ms`)\n\n  //     console.log(`${key}:parse`, `${delta.toFixed(3)}ms`, args[0])\n\n  //     return result\n  //   }\n  // })\n\n  if (options.disableParsingRawHTML === true) {\n    delete rules[RuleType.htmlBlock]\n    delete rules[RuleType.htmlSelfClosing]\n  }\n\n  const parser = parserFor(rules)\n  const emitter: Function = reactFor(createRenderer(rules, options.renderRule))\n\n  const jsx = compile(markdown)\n\n  if (footnotes.length) {\n    return (\n      <div>\n        {jsx}\n        <footer key=\"footer\">\n          {footnotes.map(function createFootnote(def) {\n            return (\n              <div\n                id={options.slugify(def.identifier, slugify)}\n                key={def.identifier}\n              >\n                {def.identifier}\n                {emitter(parser(def.footnote, { inline: true }))}\n              </div>\n            )\n          })}\n        </footer>\n      </div>\n    )\n  }\n\n  return jsx\n}\n\n/**\n * A simple HOC for easy React use. Feed the markdown content as a direct child\n * and the rest is taken care of automatically.\n */\nconst Markdown: React.FC<{\n  [key: string]: any\n  children: string\n  options?: MarkdownToJSX.Options\n}> = ({ children = '', options, ...props }) => {\n  if (process.env.NODE_ENV !== 'production' && typeof children !== 'string') {\n    console.error(\n      'markdown-to-jsx: <Markdown> component only accepts a single string as a child, received:',\n      children\n    )\n  }\n\n  return React.cloneElement(\n    compiler(children, options),\n    props as JSX.IntrinsicAttributes\n  )\n}\n\nexport namespace MarkdownToJSX {\n  /**\n   * RequireAtLeastOne<{ ... }> <- only requires at least one key\n   */\n  type RequireAtLeastOne<T, Keys extends keyof T = keyof T> = Pick<\n    T,\n    Exclude<keyof T, Keys>\n  > &\n    {\n      [K in Keys]-?: Required<Pick<T, K>> & Partial<Pick<T, Exclude<Keys, K>>>\n    }[Keys]\n\n  export type CreateElement = typeof React.createElement\n\n  export type HTMLTags = keyof JSX.IntrinsicElements\n\n  export type State = {\n    /** true if the current content is inside anchor link grammar */\n    inAnchor?: boolean\n    /** true if parsing in an inline context (subset of rules around formatting and links) */\n    inline?: boolean\n    /** true if in a table */\n    inTable?: boolean\n    /** use this for the `key` prop */\n    key?: React.Key\n    /** true if in a list */\n    list?: boolean\n    /** true if parsing in inline context w/o links */\n    simple?: boolean\n  }\n\n  export interface BlockQuoteNode {\n    children: MarkdownToJSX.ParserResult[]\n    type: typeof RuleType.blockQuote\n  }\n\n  export interface BreakLineNode {\n    type: typeof RuleType.breakLine\n  }\n\n  export interface BreakThematicNode {\n    type: typeof RuleType.breakThematic\n  }\n\n  export interface CodeBlockNode {\n    type: typeof RuleType.codeBlock\n    attrs?: JSX.IntrinsicAttributes\n    lang?: string\n    text: string\n  }\n\n  export interface CodeFencedNode {\n    type: typeof RuleType.codeFenced\n  }\n\n  export interface CodeInlineNode {\n    type: typeof RuleType.codeInline\n    text: string\n  }\n\n  export interface FootnoteNode {\n    type: typeof RuleType.footnote\n  }\n\n  export interface FootnoteReferenceNode {\n    type: typeof RuleType.footnoteReference\n    target: string\n    text: string\n  }\n\n  export interface GFMTaskNode {\n    type: typeof RuleType.gfmTask\n    completed: boolean\n  }\n\n  export interface HeadingNode {\n    type: typeof RuleType.heading\n    children: MarkdownToJSX.ParserResult[]\n    id: string\n    level: 1 | 2 | 3 | 4 | 5 | 6\n  }\n\n  export interface HeadingSetextNode {\n    type: typeof RuleType.headingSetext\n  }\n\n  export interface HTMLCommentNode {\n    type: typeof RuleType.htmlComment\n  }\n\n  export interface ImageNode {\n    type: typeof RuleType.image\n    alt?: string\n    target: string\n    title?: string\n  }\n\n  export interface LinkNode {\n    type: typeof RuleType.link\n    children: MarkdownToJSX.ParserResult[]\n    target: string\n    title?: string\n  }\n\n  export interface LinkAngleBraceNode {\n    type: typeof RuleType.linkAngleBraceStyleDetector\n  }\n\n  export interface LinkBareURLNode {\n    type: typeof RuleType.linkBareUrlDetector\n  }\n\n  export interface LinkMailtoNode {\n    type: typeof RuleType.linkMailtoDetector\n  }\n\n  export interface OrderedListNode {\n    type: typeof RuleType.orderedList\n    items: MarkdownToJSX.ParserResult[][]\n    ordered: true\n    start?: number\n  }\n\n  export interface UnorderedListNode {\n    type: typeof RuleType.unorderedList\n    items: MarkdownToJSX.ParserResult[][]\n    ordered: false\n  }\n\n  export interface NewlineNode {\n    type: typeof RuleType.newlineCoalescer\n  }\n\n  export interface ParagraphNode {\n    type: typeof RuleType.paragraph\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface ReferenceNode {\n    type: typeof RuleType.ref\n  }\n\n  export interface ReferenceImageNode {\n    type: typeof RuleType.refImage\n    alt?: string\n    ref: string\n  }\n\n  export interface ReferenceLinkNode {\n    type: typeof RuleType.refLink\n    children: MarkdownToJSX.ParserResult[]\n    fallbackChildren: MarkdownToJSX.ParserResult[]\n    ref: string\n  }\n\n  export interface TableNode {\n    type: typeof RuleType.table\n    /**\n     * alignment for each table column\n     */\n    align: ('left' | 'right' | 'center')[]\n    cells: MarkdownToJSX.ParserResult[][][]\n    header: MarkdownToJSX.ParserResult[][]\n  }\n\n  export interface TableSeparatorNode {\n    type: typeof RuleType.tableSeparator\n  }\n\n  export interface TextNode {\n    type: typeof RuleType.text\n    text: string\n  }\n\n  export interface BoldTextNode {\n    type: typeof RuleType.textBolded\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface ItalicTextNode {\n    type: typeof RuleType.textEmphasized\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface EscapedTextNode {\n    type: typeof RuleType.textEscaped\n  }\n\n  export interface MarkedTextNode {\n    type: typeof RuleType.textMarked\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface StrikethroughTextNode {\n    type: typeof RuleType.textStrikethroughed\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface HTMLNode {\n    type: typeof RuleType.htmlBlock\n    attrs: JSX.IntrinsicAttributes\n    children?: ReturnType<MarkdownToJSX.NestedParser> | undefined\n    noInnerParse: Boolean\n    tag: MarkdownToJSX.HTMLTags\n    text?: string | undefined\n  }\n\n  export interface HTMLSelfClosingNode {\n    type: typeof RuleType.htmlSelfClosing\n    attrs: JSX.IntrinsicAttributes\n    tag: string\n  }\n\n  export type ParserResult =\n    | BlockQuoteNode\n    | BreakLineNode\n    | BreakThematicNode\n    | CodeBlockNode\n    | CodeFencedNode\n    | CodeInlineNode\n    | FootnoteNode\n    | FootnoteReferenceNode\n    | GFMTaskNode\n    | HeadingNode\n    | HeadingSetextNode\n    | HTMLCommentNode\n    | ImageNode\n    | LinkNode\n    | LinkAngleBraceNode\n    | LinkBareURLNode\n    | LinkMailtoNode\n    | OrderedListNode\n    | UnorderedListNode\n    | NewlineNode\n    | ParagraphNode\n    | ReferenceNode\n    | ReferenceImageNode\n    | ReferenceLinkNode\n    | TableNode\n    | TableSeparatorNode\n    | TextNode\n    | BoldTextNode\n    | ItalicTextNode\n    | EscapedTextNode\n    | MarkedTextNode\n    | StrikethroughTextNode\n    | HTMLNode\n    | HTMLSelfClosingNode\n\n  export type NestedParser = (\n    input: string,\n    state?: MarkdownToJSX.State\n  ) => MarkdownToJSX.ParserResult[]\n\n  export type Parser<ParserOutput> = (\n    capture: RegExpMatchArray,\n    nestedParse: NestedParser,\n    state?: MarkdownToJSX.State\n  ) => ParserOutput\n\n  export type RuleOutput = (\n    ast: MarkdownToJSX.ParserResult | MarkdownToJSX.ParserResult[],\n    state: MarkdownToJSX.State\n  ) => JSX.Element\n\n  export type Rule<ParserOutput = MarkdownToJSX.ParserResult> = {\n    match: (\n      source: string,\n      state: MarkdownToJSX.State,\n      prevCapturedString?: string\n    ) => RegExpMatchArray\n    order: Priority\n    parse: MarkdownToJSX.Parser<Omit<ParserOutput, 'type'>>\n    render?: (\n      node: ParserOutput,\n      /**\n       * Continue rendering AST nodes if applicable.\n       */\n      render: RuleOutput,\n      state?: MarkdownToJSX.State\n    ) => React.ReactChild\n  }\n\n  export type Rules = {\n    [K in ParserResult['type']]: K extends typeof RuleType.table\n      ? Rule<Extract<ParserResult, { type: K | typeof RuleType.paragraph }>>\n      : Rule<Extract<ParserResult, { type: K }>>\n  }\n\n  export type Override =\n    | RequireAtLeastOne<{\n        component: React.ElementType\n        props: Object\n      }>\n    | React.ElementType\n\n  export type Overrides = {\n    [tag in HTMLTags]?: Override\n  } & {\n    [customComponent: string]: Override\n  }\n\n  export type Options = Partial<{\n    /**\n     * Ultimate control over the output of all rendered JSX.\n     */\n    createElement: (\n      tag: Parameters<CreateElement>[0],\n      props: JSX.IntrinsicAttributes,\n      ...children: React.ReactChild[]\n    ) => React.ReactChild\n\n    /**\n     * Disable the compiler's best-effort transcription of provided raw HTML\n     * into JSX-equivalent. This is the functionality that prevents the need to\n     * use `dangerouslySetInnerHTML` in React.\n     */\n    disableParsingRawHTML: boolean\n\n    /**\n     * Forces the compiler to have space between hash sign and the header text which\n     * is explicitly stated in the most of the markdown specs.\n     * https://github.github.com/gfm/#atx-heading\n     * `The opening sequence of # characters must be followed by a space or by the end of line.`\n     */\n    enforceAtxHeadings: boolean\n\n    /**\n     * Forces the compiler to always output content with a block-level wrapper\n     * (`<p>` or any block-level syntax your markdown already contains.)\n     */\n    forceBlock: boolean\n\n    /**\n     * Forces the compiler to always output content with an inline wrapper (`<span>`)\n     */\n    forceInline: boolean\n\n    /**\n     * Forces the compiler to wrap results, even if there is only a single\n     * child or no children.\n     */\n    forceWrapper: boolean\n\n    /**\n     * Supply additional HTML entity: unicode replacement mappings.\n     *\n     * Pass only the inner part of the entity as the key,\n     * e.g. `&le;` -> `{ \"le\": \"\\u2264\" }`\n     *\n     * By default\n     * the following entities are replaced with their unicode equivalents:\n     *\n     * ```\n     * &amp;\n     * &apos;\n     * &gt;\n     * &lt;\n     * &nbsp;\n     * &quot;\n     * ```\n     */\n    namedCodesToUnicode: {\n      [key: string]: string\n    }\n\n    /**\n     * Selectively control the output of particular HTML tags as they would be\n     * emitted by the compiler.\n     */\n    overrides: Overrides\n\n    /**\n     * Allows for full control over rendering of particular rules.\n     * For example, to implement a LaTeX renderer such as `react-katex`:\n     *\n     * ```\n     * renderRule(next, node, renderChildren, state) {\n     *   if (node.type === RuleType.codeBlock && node.lang === 'latex') {\n     *     return (\n     *       <TeX as=\"div\" key={state.key}>\n     *         {String.raw`${node.text}`}\n     *       </TeX>\n     *     )\n     *   }\n     *\n     *   return next();\n     * }\n     * ```\n     *\n     * Thar be dragons obviously, but you can do a lot with this\n     * (have fun!) To see how things work internally, check the `render`\n     * method in source for a particular rule.\n     */\n    renderRule: (\n      /** Resume normal processing, call this function as a fallback if you are not returning custom JSX. */\n      next: () => React.ReactChild,\n      /** the current AST node, use `RuleType` against `node.type` for identification */\n      node: ParserResult,\n      /** use as `renderChildren(node.children)` for block nodes */\n      renderChildren: RuleOutput,\n      /** contains `key` which should be supplied to the topmost JSX element */\n      state: State\n    ) => React.ReactChild\n\n    /**\n     * Override the built-in sanitizer function for URLs, etc if desired. The built-in version is available as a library export called `sanitizer`.\n     */\n    sanitizer: (\n      value: string,\n      tag: HTMLTags,\n      attribute: string\n    ) => string | null\n\n    /**\n     * Override normalization of non-URI-safe characters for use in generating\n     * HTML IDs for anchor linking purposes.\n     */\n    slugify: (input: string, defaultFn: (input: string) => string) => string\n\n    /**\n     * Declare the type of the wrapper to be used when there are multiple\n     * children to render. Set to `null` to get an array of children back\n     * without any wrapper, or use `React.Fragment` to get a React element\n     * that won't show up in the DOM.\n     */\n    wrapper: React.ElementType | null\n  }>\n}\n\nexport default Markdown\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport dayjs from 'dayjs';\nimport Markdown from 'markdown-to-jsx';\n\nconst Job = ({\n  data: {\n    name, position, startDate, endDate, summary, highlights,\n  },\n}) => (\n  <article className=\"jobs-container\">\n    <header>\n      <h4>\n        {name} - {position}\n      </h4>\n      <p className=\"daterange\">\n        {' '}\n        {dayjs(startDate).format('MMMM YYYY')} -{' '}\n        {endDate ? dayjs(endDate).format('MMMM YYYY') : 'PRESENT'}\n      </p>\n    </header>\n    {summary ? (\n      <Markdown\n        options={{\n          overrides: {\n            p: {\n              props: {\n                className: 'summary',\n              },\n            },\n          },\n        }}\n      >\n        {summary}\n      </Markdown>\n    ) : null}\n    {highlights ? (\n      <ul className=\"points\">\n        {highlights.map((highlight) => (\n          <li key={highlight}>{highlight}</li>\n        ))}\n      </ul>\n    ) : null}\n  </article>\n);\n\nJob.propTypes = {\n  data: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    position: PropTypes.string.isRequired,\n    url: PropTypes.string,\n    startDate: PropTypes.string.isRequired,\n    endDate: PropTypes.string,\n    summary: PropTypes.string,\n    highlights: PropTypes.arrayOf(PropTypes.string.isRequired),\n  }).isRequired,\n};\n\nexport default Job;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Job from './Experience/Job';\n\nconst Experience = ({ data }) => (\n  <div className=\"experience\">\n    <div className=\"link-to\" id=\"experience\" />\n    <div className=\"title\">\n      <h3>Experience</h3>\n    </div>\n    {data.map((job) => (\n      <Job data={job} key={`${job.name}-${job.position}`} />\n    ))}\n  </div>\n);\n\nExperience.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.exact({\n      name: PropTypes.string,\n      position: PropTypes.string,\n      url: PropTypes.string,\n      startDate: PropTypes.string,\n      endDate: PropTypes.string,\n      highlights: PropTypes.arrayOf(PropTypes.string),\n      summary: PropTypes.string,\n    }),\n  ),\n};\n\nExperience.defaultProps = {\n  data: [],\n};\n\nexport default Experience;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst References = () => (\n  <div className=\"references\">\n    <div className=\"link-to\" id=\"references\" />\n    <div className=\"title\">\n      <Link to=\"/contact\">\n        <h3>References are available upon request</h3>\n      </Link>\n    </div>\n  </div>\n);\n\nexport default References;\n","const degrees = [\n  {\n    school: 'Brown University',\n    degree: 'B.S. Applied Mathematics, B.A. Computer Science',\n    link: 'https://brown.edu',\n    year: 2027,\n  },\n];\n\nexport default degrees;\n","/**\n * @typedef {Object} Position\n * Conforms to https://jsonresume.org/schema/\n *\n * @property {string} name - Name of the company\n * @property {string} position - Position title\n * @property {string} url - Company website\n * @property {string} startDate - Start date of the position in YYYY-MM-DD format\n * @property {string|undefined} endDate - End date of the position in YYYY-MM-DD format.\n * If undefined, the position is still active.\n * @property {string|undefined} summary - html/markdown summary of the position\n * @property {string[]} highlights - plain text highlights of the position (bulleted list)\n */\nconst work = [\n  {\n    name: 'AbbVie',\n    position: 'Bioinformatics and Data Science Intern',\n    url: 'https://www.abbvie.com',\n    startDate: '2024-05-21',\n    endDate: '2024-08-12',\n    highlights: [\n      'Developed a robust scRNA sequencing computational workflow in R, leveraging industry standard bioinformatic tools and libraries, including Seurat and SingleR, for clustering analysis using k-nearest neighbor and shared-nearest neighbor algorithms.',\n      'Processed, performed quality control, and structuralized scRNA and TCR sequencing datasets in R, enhancing accuracy of data analysis by 15% and validated pre-clinical study results with 93% accuracy.',\n    ],\n  },\n  {\n    name: 'Brown University',\n    position: 'Machine Learning Researcher',\n    url: 'https://www.brown.edu',\n    startDate: '2024-05-10',\n    highlights: [\n      'Leading a team of 3 researchers to fine-tune Foundation Models on high-quality, internally curated medical datasets, improving the efficiency and accuracy of the clinical note-writing process by incorporating advanced machine learning techniques.',\n      'Implementing qLoRA fine-tuning, enhancing computational efficiency by 50%, and utilizing Fully Sharded Data Parallel (FSDP) to enable multi-GPU training, optimizing large-scale model training.',\n      'Designed and built an end-to-end transcription-diarization pipeline using WhisperX and Llama 3.1 in Python, significantly improving the quality of clinical notes.',\n    ],\n  },\n  {\n    name: 'Full Stack at Brown',\n    position: 'Full Stack Developer',\n    url: 'https://fullstack.brown.edu',\n    startDate: '2023-09-13',\n    highlights: [\n      'Developed the frontend of pro-bono web applications using React and the backend with Node.js, integrating AWS for data storage and cloud services.',\n      'Led a team of developers in creating software solutions for university clubs and organizations, enhancing user experience by 30%.',\n      'Utilized Google Cloud Platform (GCP) for deployment, efficient data storage and role management.',\n    ],\n  },\n  {\n    name: 'UCSF Data Science CoLab',\n    position: 'Bioinformatics Research Intern',\n    startDate: '2023-05-10',\n    endDate: '2023-08-12',\n    highlights: [\n      'Conducted pioneering research on spatiotemporal relationships between immune and cancer cells in Oral Squamous Cell Carcinoma biopsies using Multiplexed Ion Beam Imaging.',\n      'Enhanced spatial transcriptomics analysis to investigate cellular composition and identify distinct cellular neighborhoods in Python.',\n    ],\n  },\n];\n\nexport default work;\n","import React from 'react';\n// import { Link } from 'react-router-dom';\n\nimport Main from '../layouts/Main';\n\nimport Education from '../components/Resume/Education';\nimport Experience from '../components/Resume/Experience';\n// import Skills from '../components/Resume/Skills';\n// import Courses from '../components/Resume/Courses';\nimport References from '../components/Resume/References';\n\n// import courses from '../data/resume/courses';\nimport degrees from '../data/resume/degrees';\nimport work from '../data/resume/work';\n// import { skills, categories } from '../data/resume/skills';\n\n// NOTE: sections are displayed in order defined.\nconst { PUBLIC_URL } = process.env;\nconst sections = {\n  Education: () => <Education data={degrees} />,\n  Experience: () => <Experience data={work} />,\n  // Courses: () => <Courses data={courses} />,\n  // Skills: () => <Skills skills={skills} categories={categories} />,\n  References: () => <References />,\n};\n\nconst Resume = () => (\n  <Main\n    title=\"Resume\"\n    description=\"John Huang's resume\"\n  >\n    <article className=\"post\" id=\"resume\">\n      <header>\n        <div className=\"title\">\n          <h2>\n            <a href={`${PUBLIC_URL}/JohnHuangResume.jpg`} alt=\"John Huang Resume\" target=\"_blank\" rel=\"noreferrer\">Resume</a>\n          </h2>\n          <div className=\"link-container\">\n            {Object.keys(sections).map((sec) => (\n              <h4 key={sec}>\n                <a href={`#${sec.toLowerCase()}`}>{sec}</a>\n              </h4>\n            ))}\n          </div>\n        </div>\n      </header>\n      {Object.entries(sections).map(([name, Section]) => (\n        <Section key={name} />\n      ))}\n    </article>\n  </Main>\n);\n\nexport default Resume;\n","!function(t,e){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=e():\"function\"==typeof define&&define.amd?define(e):(t=\"undefined\"!=typeof globalThis?globalThis:t||self).dayjs=e()}(this,(function(){\"use strict\";var t=1e3,e=6e4,n=36e5,r=\"millisecond\",i=\"second\",s=\"minute\",u=\"hour\",a=\"day\",o=\"week\",c=\"month\",f=\"quarter\",h=\"year\",d=\"date\",l=\"Invalid Date\",$=/^(\\d{4})[-/]?(\\d{1,2})?[-/]?(\\d{0,2})[Tt\\s]*(\\d{1,2})?:?(\\d{1,2})?:?(\\d{1,2})?[.:]?(\\d+)?$/,y=/\\[([^\\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g,M={name:\"en\",weekdays:\"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday\".split(\"_\"),months:\"January_February_March_April_May_June_July_August_September_October_November_December\".split(\"_\"),ordinal:function(t){var e=[\"th\",\"st\",\"nd\",\"rd\"],n=t%100;return\"[\"+t+(e[(n-20)%10]||e[n]||e[0])+\"]\"}},m=function(t,e,n){var r=String(t);return!r||r.length>=e?t:\"\"+Array(e+1-r.length).join(n)+t},v={s:m,z:function(t){var e=-t.utcOffset(),n=Math.abs(e),r=Math.floor(n/60),i=n%60;return(e<=0?\"+\":\"-\")+m(r,2,\"0\")+\":\"+m(i,2,\"0\")},m:function t(e,n){if(e.date()<n.date())return-t(n,e);var r=12*(n.year()-e.year())+(n.month()-e.month()),i=e.clone().add(r,c),s=n-i<0,u=e.clone().add(r+(s?-1:1),c);return+(-(r+(n-i)/(s?i-u:u-i))||0)},a:function(t){return t<0?Math.ceil(t)||0:Math.floor(t)},p:function(t){return{M:c,y:h,w:o,d:a,D:d,h:u,m:s,s:i,ms:r,Q:f}[t]||String(t||\"\").toLowerCase().replace(/s$/,\"\")},u:function(t){return void 0===t}},g=\"en\",D={};D[g]=M;var p=\"$isDayjsObject\",S=function(t){return t instanceof _||!(!t||!t[p])},w=function t(e,n,r){var i;if(!e)return g;if(\"string\"==typeof e){var s=e.toLowerCase();D[s]&&(i=s),n&&(D[s]=n,i=s);var u=e.split(\"-\");if(!i&&u.length>1)return t(u[0])}else{var a=e.name;D[a]=e,i=a}return!r&&i&&(g=i),i||!r&&g},O=function(t,e){if(S(t))return t.clone();var n=\"object\"==typeof e?e:{};return n.date=t,n.args=arguments,new _(n)},b=v;b.l=w,b.i=S,b.w=function(t,e){return O(t,{locale:e.$L,utc:e.$u,x:e.$x,$offset:e.$offset})};var _=function(){function M(t){this.$L=w(t.locale,null,!0),this.parse(t),this.$x=this.$x||t.x||{},this[p]=!0}var m=M.prototype;return m.parse=function(t){this.$d=function(t){var e=t.date,n=t.utc;if(null===e)return new Date(NaN);if(b.u(e))return new Date;if(e instanceof Date)return new Date(e);if(\"string\"==typeof e&&!/Z$/i.test(e)){var r=e.match($);if(r){var i=r[2]-1||0,s=(r[7]||\"0\").substring(0,3);return n?new Date(Date.UTC(r[1],i,r[3]||1,r[4]||0,r[5]||0,r[6]||0,s)):new Date(r[1],i,r[3]||1,r[4]||0,r[5]||0,r[6]||0,s)}}return new Date(e)}(t),this.init()},m.init=function(){var t=this.$d;this.$y=t.getFullYear(),this.$M=t.getMonth(),this.$D=t.getDate(),this.$W=t.getDay(),this.$H=t.getHours(),this.$m=t.getMinutes(),this.$s=t.getSeconds(),this.$ms=t.getMilliseconds()},m.$utils=function(){return b},m.isValid=function(){return!(this.$d.toString()===l)},m.isSame=function(t,e){var n=O(t);return this.startOf(e)<=n&&n<=this.endOf(e)},m.isAfter=function(t,e){return O(t)<this.startOf(e)},m.isBefore=function(t,e){return this.endOf(e)<O(t)},m.$g=function(t,e,n){return b.u(t)?this[e]:this.set(n,t)},m.unix=function(){return Math.floor(this.valueOf()/1e3)},m.valueOf=function(){return this.$d.getTime()},m.startOf=function(t,e){var n=this,r=!!b.u(e)||e,f=b.p(t),l=function(t,e){var i=b.w(n.$u?Date.UTC(n.$y,e,t):new Date(n.$y,e,t),n);return r?i:i.endOf(a)},$=function(t,e){return b.w(n.toDate()[t].apply(n.toDate(\"s\"),(r?[0,0,0,0]:[23,59,59,999]).slice(e)),n)},y=this.$W,M=this.$M,m=this.$D,v=\"set\"+(this.$u?\"UTC\":\"\");switch(f){case h:return r?l(1,0):l(31,11);case c:return r?l(1,M):l(0,M+1);case o:var g=this.$locale().weekStart||0,D=(y<g?y+7:y)-g;return l(r?m-D:m+(6-D),M);case a:case d:return $(v+\"Hours\",0);case u:return $(v+\"Minutes\",1);case s:return $(v+\"Seconds\",2);case i:return $(v+\"Milliseconds\",3);default:return this.clone()}},m.endOf=function(t){return this.startOf(t,!1)},m.$set=function(t,e){var n,o=b.p(t),f=\"set\"+(this.$u?\"UTC\":\"\"),l=(n={},n[a]=f+\"Date\",n[d]=f+\"Date\",n[c]=f+\"Month\",n[h]=f+\"FullYear\",n[u]=f+\"Hours\",n[s]=f+\"Minutes\",n[i]=f+\"Seconds\",n[r]=f+\"Milliseconds\",n)[o],$=o===a?this.$D+(e-this.$W):e;if(o===c||o===h){var y=this.clone().set(d,1);y.$d[l]($),y.init(),this.$d=y.set(d,Math.min(this.$D,y.daysInMonth())).$d}else l&&this.$d[l]($);return this.init(),this},m.set=function(t,e){return this.clone().$set(t,e)},m.get=function(t){return this[b.p(t)]()},m.add=function(r,f){var d,l=this;r=Number(r);var $=b.p(f),y=function(t){var e=O(l);return b.w(e.date(e.date()+Math.round(t*r)),l)};if($===c)return this.set(c,this.$M+r);if($===h)return this.set(h,this.$y+r);if($===a)return y(1);if($===o)return y(7);var M=(d={},d[s]=e,d[u]=n,d[i]=t,d)[$]||1,m=this.$d.getTime()+r*M;return b.w(m,this)},m.subtract=function(t,e){return this.add(-1*t,e)},m.format=function(t){var e=this,n=this.$locale();if(!this.isValid())return n.invalidDate||l;var r=t||\"YYYY-MM-DDTHH:mm:ssZ\",i=b.z(this),s=this.$H,u=this.$m,a=this.$M,o=n.weekdays,c=n.months,f=n.meridiem,h=function(t,n,i,s){return t&&(t[n]||t(e,r))||i[n].slice(0,s)},d=function(t){return b.s(s%12||12,t,\"0\")},$=f||function(t,e,n){var r=t<12?\"AM\":\"PM\";return n?r.toLowerCase():r};return r.replace(y,(function(t,r){return r||function(t){switch(t){case\"YY\":return String(e.$y).slice(-2);case\"YYYY\":return b.s(e.$y,4,\"0\");case\"M\":return a+1;case\"MM\":return b.s(a+1,2,\"0\");case\"MMM\":return h(n.monthsShort,a,c,3);case\"MMMM\":return h(c,a);case\"D\":return e.$D;case\"DD\":return b.s(e.$D,2,\"0\");case\"d\":return String(e.$W);case\"dd\":return h(n.weekdaysMin,e.$W,o,2);case\"ddd\":return h(n.weekdaysShort,e.$W,o,3);case\"dddd\":return o[e.$W];case\"H\":return String(s);case\"HH\":return b.s(s,2,\"0\");case\"h\":return d(1);case\"hh\":return d(2);case\"a\":return $(s,u,!0);case\"A\":return $(s,u,!1);case\"m\":return String(u);case\"mm\":return b.s(u,2,\"0\");case\"s\":return String(e.$s);case\"ss\":return b.s(e.$s,2,\"0\");case\"SSS\":return b.s(e.$ms,3,\"0\");case\"Z\":return i}return null}(t)||i.replace(\":\",\"\")}))},m.utcOffset=function(){return 15*-Math.round(this.$d.getTimezoneOffset()/15)},m.diff=function(r,d,l){var $,y=this,M=b.p(d),m=O(r),v=(m.utcOffset()-this.utcOffset())*e,g=this-m,D=function(){return b.m(y,m)};switch(M){case h:$=D()/12;break;case c:$=D();break;case f:$=D()/3;break;case o:$=(g-v)/6048e5;break;case a:$=(g-v)/864e5;break;case u:$=g/n;break;case s:$=g/e;break;case i:$=g/t;break;default:$=g}return l?$:b.a($)},m.daysInMonth=function(){return this.endOf(c).$D},m.$locale=function(){return D[this.$L]},m.locale=function(t,e){if(!t)return this.$L;var n=this.clone(),r=w(t,e,!0);return r&&(n.$L=r),n},m.clone=function(){return b.w(this.$d,this)},m.toDate=function(){return new Date(this.valueOf())},m.toJSON=function(){return this.isValid()?this.toISOString():null},m.toISOString=function(){return this.$d.toISOString()},m.toString=function(){return this.$d.toUTCString()},M}(),k=_.prototype;return O.prototype=k,[[\"$ms\",r],[\"$s\",i],[\"$m\",s],[\"$H\",u],[\"$W\",a],[\"$M\",c],[\"$y\",h],[\"$D\",d]].forEach((function(t){k[t[1]]=function(e){return this.$g(e,t[0],t[1])}})),O.extend=function(t,e){return t.$i||(t(e,_,O),t.$i=!0),O},O.locale=w,O.isDayjs=S,O.unix=function(t){return O(1e3*t)},O.en=D[g],O.Ls=D,O.p={},O}));"],"names":["_ref","data","_jsx","className","children","_jsxs","degree","href","link","school","year","Education","id","map","Degree","defaultProps","RuleType","blockQuote","breakLine","breakThematic","codeBlock","codeFenced","codeInline","footnote","footnoteReference","gfmTask","heading","headingSetext","htmlBlock","htmlComment","htmlSelfClosing","image","linkAngleBraceStyleDetector","linkBareUrlDetector","linkMailtoDetector","newlineCoalescer","orderedList","paragraph","ref","refImage","refLink","table","tableSeparator","text","textBolded","textEmphasized","textEscaped","textMarked","textStrikethroughed","unorderedList","Priority","ATTRIBUTE_TO_JSX_PROP_MAP","reduce","obj","x","toLowerCase","for","namedCodesToUnicode","amp","apos","gt","lt","nbsp","quot","DO_NOT_PROCESS_HTML_ELEMENTS","ATTR_EXTRACTOR_R","AUTOLINK_MAILTO_CHECK_R","BLOCK_END_R","BLOCKQUOTE_R","BLOCKQUOTE_TRIM_LEFT_MULTILINE_R","BREAK_LINE_R","BREAK_THEMATIC_R","CODE_BLOCK_FENCED_R","CODE_BLOCK_R","CODE_INLINE_R","CONSECUTIVE_NEWLINE_R","CR_NEWLINE_R","FOOTNOTE_R","FOOTNOTE_REFERENCE_R","FORMFEED_R","FRONT_MATTER_R","GFM_TASK_R","HEADING_R","HEADING_ATX_COMPLIANT_R","HEADING_SETEXT_R","HTML_BLOCK_ELEMENT_R","HTML_CHAR_CODE_R","HTML_COMMENT_R","HTML_CUSTOM_ATTR_R","HTML_SELF_CLOSING_ELEMENT_R","INTERPOLATION_R","LINK_AUTOLINK_BARE_URL_R","LINK_AUTOLINK_MAILTO_R","LINK_AUTOLINK_R","CAPTURE_LETTER_AFTER_HYPHEN","NP_TABLE_R","REFERENCE_IMAGE_OR_LINK","REFERENCE_IMAGE_R","REFERENCE_LINK_R","SQUARE_BRACKETS_R","SHOULD_RENDER_AS_BLOCK_R","TAB_R","TABLE_TRIM_PIPES","TABLE_CENTER_ALIGN","TABLE_LEFT_ALIGN","TABLE_RIGHT_ALIGN","INLINE_SKIP_R","TEXT_BOLD_R","RegExp","TEXT_EMPHASIZED_R","TEXT_MARKED_R","TEXT_STRIKETHROUGHED_R","TEXT_ESCAPED_R","TEXT_PLAIN_R","TRIM_STARTING_NEWLINES","HTML_LEFT_TRIM_AMOUNT_R","UNESCAPE_URL_R","LIST_ITEM_END_R","LIST_LOOKBEHIND_R","ORDERED_LIST_BULLET","UNORDERED_LIST_BULLET","generateListItemPrefix","type","ORDERED_LIST_ITEM_PREFIX","UNORDERED_LIST_ITEM_PREFIX","generateListItemPrefixRegex","ORDERED_LIST_ITEM_PREFIX_R","UNORDERED_LIST_ITEM_PREFIX_R","generateListItemRegex","ORDERED_LIST_ITEM_R","UNORDERED_LIST_ITEM_R","generateListRegex","bullet","ORDERED_LIST_R","UNORDERED_LIST_R","generateListRule","h","ordered","LIST_R","LIST_ITEM_R","LIST_ITEM_PREFIX_R","match","source","state","prevCapture","isStartOfLine","exec","list","inline","simple","order","parse","capture","start","items","replace","lastItemWasAParagraph","item","i","space","length","spaceRegex","content","isLastItem","thisItemIsAParagraph","indexOf","oldStateInline","oldStateList","adjustedContent","result","render","node","output","key","LINK_R","IMAGE_R","NON_PARAGRAPH_BLOCK_SYNTAXES","BLOCK_SYNTAXES","slugify","str","parseTableAlignCapture","alignCapture","test","parseTableRow","tableOutput","prevInTable","inTable","tableRow","trim","split","nodes","fragment","push","apply","cells","forEach","trimEnd","parseTable","align","rowText","header","getTableStyle","colIndex","textAlign","inlineRegex","regex","simpleInlineRegex","blockRegex","anyScopeRegex","matchParagraph","prevCapturedString","endsWith","every","line","some","captured","sanitizer","url","decodeURIComponent","e","unescapeUrl","rawUrlString","parseInline","isCurrentlyInline","isCurrentlySimple","parseSimpleInline","parseBlock","parseCaptureInline","captureNothing","renderNothing","cx","args","filter","Boolean","join","get","src","path","fb","ptr","frags","shift","compiler","markdown","options","tag","props","overrideProps","overrides","createElement","override","_extends","compile","input","forceInline","forceBlock","arr","emitter","parser","pop","wrapper","jsx","forceWrapper","React","attrStringToMap","attributes","raw","index","delimiterIdx","_","letter","toUpperCase","slice","value","first","mappedKey","normalizedValue","sanitizeUrlFn","styles","kvPair","substr","footnotes","refs","rules","__","lang","attrs","identifier","target","completed","checked","readOnly","enforceAtxHeadings","level","whitespace","trimmer","trimmed","parseFunc","r","tagName","noInnerParse","ast","inAnchor","alt","title","address","fallbackChildren","style","row","c","full","inner","disableParsingRawHTML","ruleList","Object","keys","nestedParse","ruleType","rule","currCaptureString","substring","parsed","sort","typeA","typeB","orderA","orderB","userRender","renderer","renderRule","patchedRender","Array","isArray","oldKey","lastWasString","nodeOut","isString","def","_objectWithoutPropertiesLoose","name","position","startDate","endDate","summary","highlights","dayjs","format","Markdown","p","highlight","Experience","job","Job","concat","References","Link","to","PUBLIC_URL","process","sections","degrees","work","Resume","Main","description","rel","sec","entries","Section","module","exports","t","n","s","u","a","o","f","d","l","$","y","M","weekdays","months","ordinal","m","String","v","z","utcOffset","Math","abs","floor","date","month","clone","add","ceil","w","D","ms","Q","g","S","O","arguments","b","locale","$L","utc","$u","$x","$offset","this","prototype","$d","Date","NaN","UTC","init","$y","getFullYear","$M","getMonth","$D","getDate","$W","getDay","$H","getHours","$m","getMinutes","$s","getSeconds","$ms","getMilliseconds","$utils","isValid","toString","isSame","startOf","endOf","isAfter","isBefore","$g","set","unix","valueOf","getTime","toDate","$locale","weekStart","$set","min","daysInMonth","Number","round","subtract","invalidDate","meridiem","monthsShort","weekdaysMin","weekdaysShort","getTimezoneOffset","diff","toJSON","toISOString","toUTCString","k","extend","$i","isDayjs","en","Ls"],"sourceRoot":""}